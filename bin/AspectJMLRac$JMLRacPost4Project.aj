import org.aspectjml.ajmlrac.runtime.*;
public privileged aspect AspectJMLRac$JMLRacPost4Project {

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.Main object$rac): (execution( * ufrn.imd.Main..*+.*(..))
          || execution(ufrn.imd.Main..*+.new(..))
          || execution( * ufrn.imd.Main+.*(..))
          || execution(ufrn.imd.Main+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.Main..*+.*(..))
          || execution(ufrn.imd.Main..*+.new(..))
          || execution( * ufrn.imd.Main+.*(..))
          || execution(ufrn.imd.Main+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final ufrn.imd.contas.ContaComum object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws ufrn.imd.exceptions.OperacaoIllegalException : (execution(* ufrn.imd.contas.ContaComum..*+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.contas.ContaComum..*+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
execution(* ufrn.imd.contas.ContaComum+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.contas.ContaComum+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof ufrn.imd.exceptions.OperacaoIllegalException) {
      throw (ufrn.imd.exceptions.OperacaoIllegalException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.contas.ContaComum object$rac): (execution( * ufrn.imd.contas.ContaComum..*+.*(..))
          || execution(ufrn.imd.contas.ContaComum..*+.new(..))
          || execution( * ufrn.imd.contas.ContaComum+.*(..))
          || execution(ufrn.imd.contas.ContaComum+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.contas.ContaComum..*+.*(..))
          || execution(ufrn.imd.contas.ContaComum..*+.new(..))
          || execution( * ufrn.imd.contas.ContaComum+.*(..))
          || execution(ufrn.imd.contas.ContaComum+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final ufrn.imd.contas.ContaEspecial object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws ufrn.imd.exceptions.OperacaoIllegalException : (execution(* ufrn.imd.contas.ContaEspecial..*+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.contas.ContaEspecial..*+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
execution(* ufrn.imd.contas.ContaEspecial+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.contas.ContaEspecial+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof ufrn.imd.exceptions.OperacaoIllegalException) {
      throw (ufrn.imd.exceptions.OperacaoIllegalException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.contas.ContaEspecial object$rac): (execution( * ufrn.imd.contas.ContaEspecial..*+.*(..))
          || execution(ufrn.imd.contas.ContaEspecial..*+.new(..))
          || execution( * ufrn.imd.contas.ContaEspecial+.*(..))
          || execution(ufrn.imd.contas.ContaEspecial+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.contas.ContaEspecial..*+.*(..))
          || execution(ufrn.imd.contas.ContaEspecial..*+.new(..))
          || execution( * ufrn.imd.contas.ContaEspecial+.*(..))
          || execution(ufrn.imd.contas.ContaEspecial+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.exceptions.OperacaoIllegalException object$rac): (execution( * ufrn.imd.exceptions.OperacaoIllegalException..*+.*(..))
          || execution(ufrn.imd.exceptions.OperacaoIllegalException..*+.new(..))
          || execution( * ufrn.imd.exceptions.OperacaoIllegalException+.*(..))
          || execution(ufrn.imd.exceptions.OperacaoIllegalException+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.exceptions.OperacaoIllegalException..*+.*(..))
          || execution(ufrn.imd.exceptions.OperacaoIllegalException..*+.new(..))
          || execution( * ufrn.imd.exceptions.OperacaoIllegalException+.*(..))
          || execution(ufrn.imd.exceptions.OperacaoIllegalException+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final ufrn.imd.interfaces.OperacaoCreditar object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws ufrn.imd.exceptions.OperacaoIllegalException : (execution(* ufrn.imd.interfaces.OperacaoCreditar..*+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoCreditar..*+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
execution(* ufrn.imd.interfaces.OperacaoCreditar+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoCreditar+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof ufrn.imd.exceptions.OperacaoIllegalException) {
      throw (ufrn.imd.exceptions.OperacaoIllegalException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.interfaces.OperacaoCreditar object$rac): (execution( * ufrn.imd.interfaces.OperacaoCreditar..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoCreditar..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoCreditar+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoCreditar+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.interfaces.OperacaoCreditar..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoCreditar..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoCreditar+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoCreditar+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final ufrn.imd.interfaces.OperacaoDebitar object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws ufrn.imd.exceptions.OperacaoIllegalException : (execution(* ufrn.imd.interfaces.OperacaoDebitar..*+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoDebitar..*+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
execution(* ufrn.imd.interfaces.OperacaoDebitar+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoDebitar+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof ufrn.imd.exceptions.OperacaoIllegalException) {
      throw (ufrn.imd.exceptions.OperacaoIllegalException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.interfaces.OperacaoDebitar object$rac): (execution( * ufrn.imd.interfaces.OperacaoDebitar..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoDebitar..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoDebitar+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoDebitar+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.interfaces.OperacaoDebitar..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoDebitar..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoDebitar+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoDebitar+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

/** Generated by AspectJML to recover checked exceptions. *
  *  This is based on the exception introduction pattern by Laddad. */
  after(final ufrn.imd.interfaces.OperacaoTransferir object$rac) throwing(JMLInternalRuntimeException rac$e)
    throws ufrn.imd.exceptions.OperacaoIllegalException : (execution(* ufrn.imd.interfaces.OperacaoTransferir..*+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoTransferir..*+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
execution(* ufrn.imd.interfaces.OperacaoTransferir+.*(..) throws ufrn.imd.exceptions.OperacaoIllegalException) ||
    execution(ufrn.imd.interfaces.OperacaoTransferir+.new(..) throws ufrn.imd.exceptions.OperacaoIllegalException)) && 
   target(object$rac) {
    Throwable cause = rac$e.getCause();
    if(cause instanceof ufrn.imd.exceptions.OperacaoIllegalException) {
      throw (ufrn.imd.exceptions.OperacaoIllegalException)cause;
    }
    JMLChecker.rethrowUncheckedException(cause);
  }

/** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
  after(final ufrn.imd.interfaces.OperacaoTransferir object$rac): (execution( * ufrn.imd.interfaces.OperacaoTransferir..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoTransferir..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoTransferir+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoTransferir+.new(..))) && 
   this(object$rac) {
   JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
  }

/** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
  after() throwing (Throwable rac$e): (execution( * ufrn.imd.interfaces.OperacaoTransferir..*+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoTransferir..*+.new(..))
          || execution( * ufrn.imd.interfaces.OperacaoTransferir+.*(..))
          || execution(ufrn.imd.interfaces.OperacaoTransferir+.new(..))){
    JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    JMLChecker.rethrowJMLAssertionError(rac$e);
  }

}